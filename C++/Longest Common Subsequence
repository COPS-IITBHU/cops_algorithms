#include <iostream>
#include <vector>
using namespace std;

int longestCommonSubsequence(string &text1, string &text2)
{
    int n = text1.size();
    int m = text2.size();
    /*
    dp[i][j] contains the length of the longest subsequence between 
    text1[0] -> text1[i - 1] and text2[0] -> text2[j - 1]
    */
    int dp[n + 1][m + 1];

    for (int i = 0; i <= n; i++)
    {
        for (int j = 0; j <= m; j++)
        {
            /*
            If there is a match of a character from text1 and text2 increment 
            the length we got till the previous characters by 1. Otherwise 
            continue the status quo by filling th maximum value till then.
            */
            if (i == 0 || j == 0)
                dp[i][j] = 0;
            else if (text1[i - 1] == text2[j - 1])
                dp[i][j] = 1 + dp[i - 1][j - 1];
            else
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
        }
    }
    return dp[n][m];
}

int main()
{
    string word1, word2;
    cin >> word1 >> word2;
    cout << longestCommonSubsequence(word1, word2);
}
